#!/usr/bin/php -q
<?php

require_once __DIR__ . '/vendor/autoload.php';

use lloc\gitphpcl\{
	ArrayOutput, Tag, Logs
};

$options = getopt( 'f:' );
if ( 0 == count( $options ) ) {
	echo 'Please provide a path value for -f <filename>', "\n\n";
	exit( 1 );
}

exec( 'git fetch --tags' );

$cmd = 'git tag -l --format="%(creatordate:iso8601)|%(refname:short)" | sort -r';
$arr = ( new ArrayOutput( $cmd ) )->get();

$currTag   = Tag::init( $arr[0] );
$headline  = sprintf( "## %s (%s)", $currTag->get_name(), $currTag->get_date() );
$changeLog = new \lloc\gitphpcl\Changelog( $options['f'] );

if ( count( $arr ) <= 1 ) {
    // Code for the creation of the changelog file
	exit( 0 );
}

$pos = $changeLog->firstpos( '##' );
if ( $changeLog->compare( $pos, $headline ) ) {
	echo 'Nothing to do! The current release is already in your changelog!', PHP_EOL;
	exit( 0 );
};

echo $headline, PHP_EOL, PHP_EOL;

$lastTag = Tag::init( $arr[1] );

$cmd  = sprintf( 'git log %s...%s --pretty=oneline --abbrev-commit',
	$lastTag->get_name(), $currTag->get_name()
);
$arr  = ( new ArrayOutput( $cmd ) )->get();
$logs = ( new Logs( '#(?<commitId>[a-z0-9]+) (?<type>[a-z]+)\((?<module>.+)\): (?<message>.+)#' ) )->add( $arr );

$commits = $logs->get( 'fix' );
if ( $commits ) {
	echo "### Bug Fixes\n\n";

	foreach ( $commits as $c ) {
		printf( "* **%s:** %s\n", $c->module, $c->message );
	}
}

$commits = $logs->get( 'feat' );
if ( $commits ) {
	echo "### Features\n\n";

	foreach ( $commits as $c ) {
		printf( "* **%s:** %s\n", $c->module, $c->message );
	}
}
